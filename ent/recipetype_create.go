// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevinkjt2000/factory-planner/ent/recipe"
	"github.com/kevinkjt2000/factory-planner/ent/recipetype"
)

// RecipeTypeCreate is the builder for creating a RecipeType entity.
type RecipeTypeCreate struct {
	config
	mutation *RecipeTypeMutation
	hooks    []Hook
}

// SetCategory sets the "category" field.
func (rtc *RecipeTypeCreate) SetCategory(s string) *RecipeTypeCreate {
	rtc.mutation.SetCategory(s)
	return rtc
}

// SetShapeless sets the "shapeless" field.
func (rtc *RecipeTypeCreate) SetShapeless(b bool) *RecipeTypeCreate {
	rtc.mutation.SetShapeless(b)
	return rtc
}

// SetType sets the "type" field.
func (rtc *RecipeTypeCreate) SetType(s string) *RecipeTypeCreate {
	rtc.mutation.SetType(s)
	return rtc
}

// SetID sets the "id" field.
func (rtc *RecipeTypeCreate) SetID(s string) *RecipeTypeCreate {
	rtc.mutation.SetID(s)
	return rtc
}

// AddRecipeTypeIDs adds the "recipe_type" edge to the Recipe entity by IDs.
func (rtc *RecipeTypeCreate) AddRecipeTypeIDs(ids ...string) *RecipeTypeCreate {
	rtc.mutation.AddRecipeTypeIDs(ids...)
	return rtc
}

// AddRecipeType adds the "recipe_type" edges to the Recipe entity.
func (rtc *RecipeTypeCreate) AddRecipeType(r ...*Recipe) *RecipeTypeCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtc.AddRecipeTypeIDs(ids...)
}

// Mutation returns the RecipeTypeMutation object of the builder.
func (rtc *RecipeTypeCreate) Mutation() *RecipeTypeMutation {
	return rtc.mutation
}

// Save creates the RecipeType in the database.
func (rtc *RecipeTypeCreate) Save(ctx context.Context) (*RecipeType, error) {
	return withHooks(ctx, rtc.sqlSave, rtc.mutation, rtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *RecipeTypeCreate) SaveX(ctx context.Context) *RecipeType {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *RecipeTypeCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *RecipeTypeCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *RecipeTypeCreate) check() error {
	if _, ok := rtc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "RecipeType.category"`)}
	}
	if _, ok := rtc.mutation.Shapeless(); !ok {
		return &ValidationError{Name: "shapeless", err: errors.New(`ent: missing required field "RecipeType.shapeless"`)}
	}
	if _, ok := rtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "RecipeType.type"`)}
	}
	return nil
}

func (rtc *RecipeTypeCreate) sqlSave(ctx context.Context) (*RecipeType, error) {
	if err := rtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RecipeType.ID type: %T", _spec.ID.Value)
		}
	}
	rtc.mutation.id = &_node.ID
	rtc.mutation.done = true
	return _node, nil
}

func (rtc *RecipeTypeCreate) createSpec() (*RecipeType, *sqlgraph.CreateSpec) {
	var (
		_node = &RecipeType{config: rtc.config}
		_spec = sqlgraph.NewCreateSpec(recipetype.Table, sqlgraph.NewFieldSpec(recipetype.FieldID, field.TypeString))
	)
	if id, ok := rtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rtc.mutation.Category(); ok {
		_spec.SetField(recipetype.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := rtc.mutation.Shapeless(); ok {
		_spec.SetField(recipetype.FieldShapeless, field.TypeBool, value)
		_node.Shapeless = value
	}
	if value, ok := rtc.mutation.GetType(); ok {
		_spec.SetField(recipetype.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := rtc.mutation.RecipeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipetype.RecipeTypeTable,
			Columns: []string{recipetype.RecipeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecipeTypeCreateBulk is the builder for creating many RecipeType entities in bulk.
type RecipeTypeCreateBulk struct {
	config
	err      error
	builders []*RecipeTypeCreate
}

// Save creates the RecipeType entities in the database.
func (rtcb *RecipeTypeCreateBulk) Save(ctx context.Context) ([]*RecipeType, error) {
	if rtcb.err != nil {
		return nil, rtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*RecipeType, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecipeTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *RecipeTypeCreateBulk) SaveX(ctx context.Context) []*RecipeType {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *RecipeTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *RecipeTypeCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
