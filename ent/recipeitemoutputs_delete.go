// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevinkjt2000/factory-planner/ent/predicate"
	"github.com/kevinkjt2000/factory-planner/ent/recipeitemoutputs"
)

// RecipeItemOutputsDelete is the builder for deleting a RecipeItemOutputs entity.
type RecipeItemOutputsDelete struct {
	config
	hooks    []Hook
	mutation *RecipeItemOutputsMutation
}

// Where appends a list predicates to the RecipeItemOutputsDelete builder.
func (riod *RecipeItemOutputsDelete) Where(ps ...predicate.RecipeItemOutputs) *RecipeItemOutputsDelete {
	riod.mutation.Where(ps...)
	return riod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (riod *RecipeItemOutputsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, riod.sqlExec, riod.mutation, riod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (riod *RecipeItemOutputsDelete) ExecX(ctx context.Context) int {
	n, err := riod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (riod *RecipeItemOutputsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(recipeitemoutputs.Table, sqlgraph.NewFieldSpec(recipeitemoutputs.FieldID, field.TypeInt))
	if ps := riod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, riod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	riod.mutation.done = true
	return affected, err
}

// RecipeItemOutputsDeleteOne is the builder for deleting a single RecipeItemOutputs entity.
type RecipeItemOutputsDeleteOne struct {
	riod *RecipeItemOutputsDelete
}

// Where appends a list predicates to the RecipeItemOutputsDelete builder.
func (riodo *RecipeItemOutputsDeleteOne) Where(ps ...predicate.RecipeItemOutputs) *RecipeItemOutputsDeleteOne {
	riodo.riod.mutation.Where(ps...)
	return riodo
}

// Exec executes the deletion query.
func (riodo *RecipeItemOutputsDeleteOne) Exec(ctx context.Context) error {
	n, err := riodo.riod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{recipeitemoutputs.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (riodo *RecipeItemOutputsDeleteOne) ExecX(ctx context.Context) {
	if err := riodo.Exec(ctx); err != nil {
		panic(err)
	}
}
