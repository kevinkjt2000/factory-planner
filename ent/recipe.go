// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kevinkjt2000/factory-planner/ent/recipe"
	"github.com/kevinkjt2000/factory-planner/ent/recipetype"
)

// Recipe is the model entity for the Recipe schema.
type Recipe struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// RecipeTypeID holds the value of the "recipe_type_id" field.
	RecipeTypeID string `json:"recipe_type_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecipeQuery when eager-loading is set.
	Edges        RecipeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RecipeEdges holds the relations/edges for other nodes in the graph.
type RecipeEdges struct {
	// RecipeType holds the value of the recipe_type edge.
	RecipeType *RecipeType `json:"recipe_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecipeTypeOrErr returns the RecipeType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecipeEdges) RecipeTypeOrErr() (*RecipeType, error) {
	if e.RecipeType != nil {
		return e.RecipeType, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: recipetype.Label}
	}
	return nil, &NotLoadedError{edge: "recipe_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Recipe) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recipe.FieldID, recipe.FieldRecipeTypeID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Recipe fields.
func (r *Recipe) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recipe.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case recipe.FieldRecipeTypeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recipe_type_id", values[i])
			} else if value.Valid {
				r.RecipeTypeID = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Recipe.
// This includes values selected through modifiers, order, etc.
func (r *Recipe) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryRecipeType queries the "recipe_type" edge of the Recipe entity.
func (r *Recipe) QueryRecipeType() *RecipeTypeQuery {
	return NewRecipeClient(r.config).QueryRecipeType(r)
}

// Update returns a builder for updating this Recipe.
// Note that you need to call Recipe.Unwrap() before calling this method if this Recipe
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Recipe) Update() *RecipeUpdateOne {
	return NewRecipeClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Recipe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Recipe) Unwrap() *Recipe {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Recipe is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Recipe) String() string {
	var builder strings.Builder
	builder.WriteString("Recipe(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("recipe_type_id=")
	builder.WriteString(r.RecipeTypeID)
	builder.WriteByte(')')
	return builder.String()
}

// Recipes is a parsable slice of Recipe.
type Recipes []*Recipe
