// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/kevinkjt2000/factory-planner/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kevinkjt2000/factory-planner/ent/recipe"
	"github.com/kevinkjt2000/factory-planner/ent/recipeitemoutputs"
	"github.com/kevinkjt2000/factory-planner/ent/recipetype"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Recipe is the client for interacting with the Recipe builders.
	Recipe *RecipeClient
	// RecipeItemOutputs is the client for interacting with the RecipeItemOutputs builders.
	RecipeItemOutputs *RecipeItemOutputsClient
	// RecipeType is the client for interacting with the RecipeType builders.
	RecipeType *RecipeTypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Recipe = NewRecipeClient(c.config)
	c.RecipeItemOutputs = NewRecipeItemOutputsClient(c.config)
	c.RecipeType = NewRecipeTypeClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Recipe:            NewRecipeClient(cfg),
		RecipeItemOutputs: NewRecipeItemOutputsClient(cfg),
		RecipeType:        NewRecipeTypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Recipe:            NewRecipeClient(cfg),
		RecipeItemOutputs: NewRecipeItemOutputsClient(cfg),
		RecipeType:        NewRecipeTypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Recipe.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Recipe.Use(hooks...)
	c.RecipeItemOutputs.Use(hooks...)
	c.RecipeType.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Recipe.Intercept(interceptors...)
	c.RecipeItemOutputs.Intercept(interceptors...)
	c.RecipeType.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *RecipeMutation:
		return c.Recipe.mutate(ctx, m)
	case *RecipeItemOutputsMutation:
		return c.RecipeItemOutputs.mutate(ctx, m)
	case *RecipeTypeMutation:
		return c.RecipeType.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// RecipeClient is a client for the Recipe schema.
type RecipeClient struct {
	config
}

// NewRecipeClient returns a client for the Recipe from the given config.
func NewRecipeClient(c config) *RecipeClient {
	return &RecipeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recipe.Hooks(f(g(h())))`.
func (c *RecipeClient) Use(hooks ...Hook) {
	c.hooks.Recipe = append(c.hooks.Recipe, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recipe.Intercept(f(g(h())))`.
func (c *RecipeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Recipe = append(c.inters.Recipe, interceptors...)
}

// Create returns a builder for creating a Recipe entity.
func (c *RecipeClient) Create() *RecipeCreate {
	mutation := newRecipeMutation(c.config, OpCreate)
	return &RecipeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Recipe entities.
func (c *RecipeClient) CreateBulk(builders ...*RecipeCreate) *RecipeCreateBulk {
	return &RecipeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RecipeClient) MapCreateBulk(slice any, setFunc func(*RecipeCreate, int)) *RecipeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RecipeCreateBulk{err: fmt.Errorf("calling to RecipeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RecipeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RecipeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Recipe.
func (c *RecipeClient) Update() *RecipeUpdate {
	mutation := newRecipeMutation(c.config, OpUpdate)
	return &RecipeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecipeClient) UpdateOne(r *Recipe) *RecipeUpdateOne {
	mutation := newRecipeMutation(c.config, OpUpdateOne, withRecipe(r))
	return &RecipeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecipeClient) UpdateOneID(id string) *RecipeUpdateOne {
	mutation := newRecipeMutation(c.config, OpUpdateOne, withRecipeID(id))
	return &RecipeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Recipe.
func (c *RecipeClient) Delete() *RecipeDelete {
	mutation := newRecipeMutation(c.config, OpDelete)
	return &RecipeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecipeClient) DeleteOne(r *Recipe) *RecipeDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecipeClient) DeleteOneID(id string) *RecipeDeleteOne {
	builder := c.Delete().Where(recipe.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecipeDeleteOne{builder}
}

// Query returns a query builder for Recipe.
func (c *RecipeClient) Query() *RecipeQuery {
	return &RecipeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecipe},
		inters: c.Interceptors(),
	}
}

// Get returns a Recipe entity by its id.
func (c *RecipeClient) Get(ctx context.Context, id string) (*Recipe, error) {
	return c.Query().Where(recipe.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecipeClient) GetX(ctx context.Context, id string) *Recipe {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecipeType queries the recipe_type edge of a Recipe.
func (c *RecipeClient) QueryRecipeType(r *Recipe) *RecipeTypeQuery {
	query := (&RecipeTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, id),
			sqlgraph.To(recipetype.Table, recipetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recipe.RecipeTypeTable, recipe.RecipeTypeColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecipeClient) Hooks() []Hook {
	return c.hooks.Recipe
}

// Interceptors returns the client interceptors.
func (c *RecipeClient) Interceptors() []Interceptor {
	return c.inters.Recipe
}

func (c *RecipeClient) mutate(ctx context.Context, m *RecipeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecipeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecipeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecipeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecipeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Recipe mutation op: %q", m.Op())
	}
}

// RecipeItemOutputsClient is a client for the RecipeItemOutputs schema.
type RecipeItemOutputsClient struct {
	config
}

// NewRecipeItemOutputsClient returns a client for the RecipeItemOutputs from the given config.
func NewRecipeItemOutputsClient(c config) *RecipeItemOutputsClient {
	return &RecipeItemOutputsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recipeitemoutputs.Hooks(f(g(h())))`.
func (c *RecipeItemOutputsClient) Use(hooks ...Hook) {
	c.hooks.RecipeItemOutputs = append(c.hooks.RecipeItemOutputs, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recipeitemoutputs.Intercept(f(g(h())))`.
func (c *RecipeItemOutputsClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecipeItemOutputs = append(c.inters.RecipeItemOutputs, interceptors...)
}

// Create returns a builder for creating a RecipeItemOutputs entity.
func (c *RecipeItemOutputsClient) Create() *RecipeItemOutputsCreate {
	mutation := newRecipeItemOutputsMutation(c.config, OpCreate)
	return &RecipeItemOutputsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecipeItemOutputs entities.
func (c *RecipeItemOutputsClient) CreateBulk(builders ...*RecipeItemOutputsCreate) *RecipeItemOutputsCreateBulk {
	return &RecipeItemOutputsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RecipeItemOutputsClient) MapCreateBulk(slice any, setFunc func(*RecipeItemOutputsCreate, int)) *RecipeItemOutputsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RecipeItemOutputsCreateBulk{err: fmt.Errorf("calling to RecipeItemOutputsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RecipeItemOutputsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RecipeItemOutputsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecipeItemOutputs.
func (c *RecipeItemOutputsClient) Update() *RecipeItemOutputsUpdate {
	mutation := newRecipeItemOutputsMutation(c.config, OpUpdate)
	return &RecipeItemOutputsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecipeItemOutputsClient) UpdateOne(rio *RecipeItemOutputs) *RecipeItemOutputsUpdateOne {
	mutation := newRecipeItemOutputsMutation(c.config, OpUpdateOne, withRecipeItemOutputs(rio))
	return &RecipeItemOutputsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecipeItemOutputsClient) UpdateOneID(id int) *RecipeItemOutputsUpdateOne {
	mutation := newRecipeItemOutputsMutation(c.config, OpUpdateOne, withRecipeItemOutputsID(id))
	return &RecipeItemOutputsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecipeItemOutputs.
func (c *RecipeItemOutputsClient) Delete() *RecipeItemOutputsDelete {
	mutation := newRecipeItemOutputsMutation(c.config, OpDelete)
	return &RecipeItemOutputsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecipeItemOutputsClient) DeleteOne(rio *RecipeItemOutputs) *RecipeItemOutputsDeleteOne {
	return c.DeleteOneID(rio.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecipeItemOutputsClient) DeleteOneID(id int) *RecipeItemOutputsDeleteOne {
	builder := c.Delete().Where(recipeitemoutputs.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecipeItemOutputsDeleteOne{builder}
}

// Query returns a query builder for RecipeItemOutputs.
func (c *RecipeItemOutputsClient) Query() *RecipeItemOutputsQuery {
	return &RecipeItemOutputsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecipeItemOutputs},
		inters: c.Interceptors(),
	}
}

// Get returns a RecipeItemOutputs entity by its id.
func (c *RecipeItemOutputsClient) Get(ctx context.Context, id int) (*RecipeItemOutputs, error) {
	return c.Query().Where(recipeitemoutputs.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecipeItemOutputsClient) GetX(ctx context.Context, id int) *RecipeItemOutputs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RecipeItemOutputsClient) Hooks() []Hook {
	return c.hooks.RecipeItemOutputs
}

// Interceptors returns the client interceptors.
func (c *RecipeItemOutputsClient) Interceptors() []Interceptor {
	return c.inters.RecipeItemOutputs
}

func (c *RecipeItemOutputsClient) mutate(ctx context.Context, m *RecipeItemOutputsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecipeItemOutputsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecipeItemOutputsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecipeItemOutputsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecipeItemOutputsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecipeItemOutputs mutation op: %q", m.Op())
	}
}

// RecipeTypeClient is a client for the RecipeType schema.
type RecipeTypeClient struct {
	config
}

// NewRecipeTypeClient returns a client for the RecipeType from the given config.
func NewRecipeTypeClient(c config) *RecipeTypeClient {
	return &RecipeTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recipetype.Hooks(f(g(h())))`.
func (c *RecipeTypeClient) Use(hooks ...Hook) {
	c.hooks.RecipeType = append(c.hooks.RecipeType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recipetype.Intercept(f(g(h())))`.
func (c *RecipeTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecipeType = append(c.inters.RecipeType, interceptors...)
}

// Create returns a builder for creating a RecipeType entity.
func (c *RecipeTypeClient) Create() *RecipeTypeCreate {
	mutation := newRecipeTypeMutation(c.config, OpCreate)
	return &RecipeTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecipeType entities.
func (c *RecipeTypeClient) CreateBulk(builders ...*RecipeTypeCreate) *RecipeTypeCreateBulk {
	return &RecipeTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RecipeTypeClient) MapCreateBulk(slice any, setFunc func(*RecipeTypeCreate, int)) *RecipeTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RecipeTypeCreateBulk{err: fmt.Errorf("calling to RecipeTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RecipeTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RecipeTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecipeType.
func (c *RecipeTypeClient) Update() *RecipeTypeUpdate {
	mutation := newRecipeTypeMutation(c.config, OpUpdate)
	return &RecipeTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecipeTypeClient) UpdateOne(rt *RecipeType) *RecipeTypeUpdateOne {
	mutation := newRecipeTypeMutation(c.config, OpUpdateOne, withRecipeType(rt))
	return &RecipeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecipeTypeClient) UpdateOneID(id string) *RecipeTypeUpdateOne {
	mutation := newRecipeTypeMutation(c.config, OpUpdateOne, withRecipeTypeID(id))
	return &RecipeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecipeType.
func (c *RecipeTypeClient) Delete() *RecipeTypeDelete {
	mutation := newRecipeTypeMutation(c.config, OpDelete)
	return &RecipeTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecipeTypeClient) DeleteOne(rt *RecipeType) *RecipeTypeDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecipeTypeClient) DeleteOneID(id string) *RecipeTypeDeleteOne {
	builder := c.Delete().Where(recipetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecipeTypeDeleteOne{builder}
}

// Query returns a query builder for RecipeType.
func (c *RecipeTypeClient) Query() *RecipeTypeQuery {
	return &RecipeTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecipeType},
		inters: c.Interceptors(),
	}
}

// Get returns a RecipeType entity by its id.
func (c *RecipeTypeClient) Get(ctx context.Context, id string) (*RecipeType, error) {
	return c.Query().Where(recipetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecipeTypeClient) GetX(ctx context.Context, id string) *RecipeType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecipeType queries the recipe_type edge of a RecipeType.
func (c *RecipeTypeClient) QueryRecipeType(rt *RecipeType) *RecipeQuery {
	query := (&RecipeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recipetype.Table, recipetype.FieldID, id),
			sqlgraph.To(recipe.Table, recipe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recipetype.RecipeTypeTable, recipetype.RecipeTypeColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecipeTypeClient) Hooks() []Hook {
	return c.hooks.RecipeType
}

// Interceptors returns the client interceptors.
func (c *RecipeTypeClient) Interceptors() []Interceptor {
	return c.inters.RecipeType
}

func (c *RecipeTypeClient) mutate(ctx context.Context, m *RecipeTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecipeTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecipeTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecipeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecipeTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecipeType mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Recipe, RecipeItemOutputs, RecipeType []ent.Hook
	}
	inters struct {
		Recipe, RecipeItemOutputs, RecipeType []ent.Interceptor
	}
)
