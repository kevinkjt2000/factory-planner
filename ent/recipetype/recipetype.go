// Code generated by ent, DO NOT EDIT.

package recipetype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the recipetype type in the database.
	Label = "recipe_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldShapeless holds the string denoting the shapeless field in the database.
	FieldShapeless = "shapeless"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeRecipeType holds the string denoting the recipe_type edge name in mutations.
	EdgeRecipeType = "recipe_type"
	// Table holds the table name of the recipetype in the database.
	Table = "recipe_type"
	// RecipeTypeTable is the table that holds the recipe_type relation/edge.
	RecipeTypeTable = "recipe"
	// RecipeTypeInverseTable is the table name for the Recipe entity.
	// It exists in this package in order to avoid circular dependency with the "recipe" package.
	RecipeTypeInverseTable = "recipe"
	// RecipeTypeColumn is the table column denoting the recipe_type relation/edge.
	RecipeTypeColumn = "recipe_type_id"
)

// Columns holds all SQL columns for recipetype fields.
var Columns = []string{
	FieldID,
	FieldCategory,
	FieldShapeless,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the RecipeType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByShapeless orders the results by the shapeless field.
func ByShapeless(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShapeless, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByRecipeTypeCount orders the results by recipe_type count.
func ByRecipeTypeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecipeTypeStep(), opts...)
	}
}

// ByRecipeType orders the results by recipe_type terms.
func ByRecipeType(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecipeTypeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRecipeTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecipeTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecipeTypeTable, RecipeTypeColumn),
	)
}
