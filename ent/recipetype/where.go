// Code generated by ent, DO NOT EDIT.

package recipetype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kevinkjt2000/factory-planner/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldContainsFold(FieldID, id))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldEQ(FieldCategory, v))
}

// Shapeless applies equality check predicate on the "shapeless" field. It's identical to ShapelessEQ.
func Shapeless(v bool) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldEQ(FieldShapeless, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldEQ(FieldType, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldContainsFold(FieldCategory, v))
}

// ShapelessEQ applies the EQ predicate on the "shapeless" field.
func ShapelessEQ(v bool) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldEQ(FieldShapeless, v))
}

// ShapelessNEQ applies the NEQ predicate on the "shapeless" field.
func ShapelessNEQ(v bool) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldNEQ(FieldShapeless, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.RecipeType {
	return predicate.RecipeType(sql.FieldContainsFold(FieldType, v))
}

// HasRecipeType applies the HasEdge predicate on the "recipe_type" edge.
func HasRecipeType() predicate.RecipeType {
	return predicate.RecipeType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecipeTypeTable, RecipeTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipeTypeWith applies the HasEdge predicate on the "recipe_type" edge with a given conditions (other predicates).
func HasRecipeTypeWith(preds ...predicate.Recipe) predicate.RecipeType {
	return predicate.RecipeType(func(s *sql.Selector) {
		step := newRecipeTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RecipeType) predicate.RecipeType {
	return predicate.RecipeType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RecipeType) predicate.RecipeType {
	return predicate.RecipeType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RecipeType) predicate.RecipeType {
	return predicate.RecipeType(sql.NotPredicates(p))
}
