// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kevinkjt2000/factory-planner/ent/predicate"
	"github.com/kevinkjt2000/factory-planner/ent/recipe"
	"github.com/kevinkjt2000/factory-planner/ent/recipetype"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRecipe            = "Recipe"
	TypeRecipeItemOutputs = "RecipeItemOutputs"
	TypeRecipeType        = "RecipeType"
)

// RecipeMutation represents an operation that mutates the Recipe nodes in the graph.
type RecipeMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	clearedFields      map[string]struct{}
	recipe_type        *string
	clearedrecipe_type bool
	done               bool
	oldValue           func(context.Context) (*Recipe, error)
	predicates         []predicate.Recipe
}

var _ ent.Mutation = (*RecipeMutation)(nil)

// recipeOption allows management of the mutation configuration using functional options.
type recipeOption func(*RecipeMutation)

// newRecipeMutation creates new mutation for the Recipe entity.
func newRecipeMutation(c config, op Op, opts ...recipeOption) *RecipeMutation {
	m := &RecipeMutation{
		config:        c,
		op:            op,
		typ:           TypeRecipe,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecipeID sets the ID field of the mutation.
func withRecipeID(id string) recipeOption {
	return func(m *RecipeMutation) {
		var (
			err   error
			once  sync.Once
			value *Recipe
		)
		m.oldValue = func(ctx context.Context) (*Recipe, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Recipe.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecipe sets the old Recipe of the mutation.
func withRecipe(node *Recipe) recipeOption {
	return func(m *RecipeMutation) {
		m.oldValue = func(context.Context) (*Recipe, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecipeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecipeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Recipe entities.
func (m *RecipeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecipeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RecipeMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Recipe.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRecipeTypeID sets the "recipe_type_id" field.
func (m *RecipeMutation) SetRecipeTypeID(s string) {
	m.recipe_type = &s
}

// RecipeTypeID returns the value of the "recipe_type_id" field in the mutation.
func (m *RecipeMutation) RecipeTypeID() (r string, exists bool) {
	v := m.recipe_type
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipeTypeID returns the old "recipe_type_id" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldRecipeTypeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecipeTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecipeTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipeTypeID: %w", err)
	}
	return oldValue.RecipeTypeID, nil
}

// ClearRecipeTypeID clears the value of the "recipe_type_id" field.
func (m *RecipeMutation) ClearRecipeTypeID() {
	m.recipe_type = nil
	m.clearedFields[recipe.FieldRecipeTypeID] = struct{}{}
}

// RecipeTypeIDCleared returns if the "recipe_type_id" field was cleared in this mutation.
func (m *RecipeMutation) RecipeTypeIDCleared() bool {
	_, ok := m.clearedFields[recipe.FieldRecipeTypeID]
	return ok
}

// ResetRecipeTypeID resets all changes to the "recipe_type_id" field.
func (m *RecipeMutation) ResetRecipeTypeID() {
	m.recipe_type = nil
	delete(m.clearedFields, recipe.FieldRecipeTypeID)
}

// ClearRecipeType clears the "recipe_type" edge to the RecipeType entity.
func (m *RecipeMutation) ClearRecipeType() {
	m.clearedrecipe_type = true
	m.clearedFields[recipe.FieldRecipeTypeID] = struct{}{}
}

// RecipeTypeCleared reports if the "recipe_type" edge to the RecipeType entity was cleared.
func (m *RecipeMutation) RecipeTypeCleared() bool {
	return m.RecipeTypeIDCleared() || m.clearedrecipe_type
}

// RecipeTypeIDs returns the "recipe_type" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RecipeTypeID instead. It exists only for internal usage by the builders.
func (m *RecipeMutation) RecipeTypeIDs() (ids []string) {
	if id := m.recipe_type; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRecipeType resets all changes to the "recipe_type" edge.
func (m *RecipeMutation) ResetRecipeType() {
	m.recipe_type = nil
	m.clearedrecipe_type = false
}

// Where appends a list predicates to the RecipeMutation builder.
func (m *RecipeMutation) Where(ps ...predicate.Recipe) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RecipeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RecipeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Recipe, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RecipeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RecipeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Recipe).
func (m *RecipeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecipeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.recipe_type != nil {
		fields = append(fields, recipe.FieldRecipeTypeID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecipeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case recipe.FieldRecipeTypeID:
		return m.RecipeTypeID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecipeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case recipe.FieldRecipeTypeID:
		return m.OldRecipeTypeID(ctx)
	}
	return nil, fmt.Errorf("unknown Recipe field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case recipe.FieldRecipeTypeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipeTypeID(v)
		return nil
	}
	return fmt.Errorf("unknown Recipe field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecipeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecipeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Recipe numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecipeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(recipe.FieldRecipeTypeID) {
		fields = append(fields, recipe.FieldRecipeTypeID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecipeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecipeMutation) ClearField(name string) error {
	switch name {
	case recipe.FieldRecipeTypeID:
		m.ClearRecipeTypeID()
		return nil
	}
	return fmt.Errorf("unknown Recipe nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecipeMutation) ResetField(name string) error {
	switch name {
	case recipe.FieldRecipeTypeID:
		m.ResetRecipeTypeID()
		return nil
	}
	return fmt.Errorf("unknown Recipe field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecipeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recipe_type != nil {
		edges = append(edges, recipe.EdgeRecipeType)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecipeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case recipe.EdgeRecipeType:
		if id := m.recipe_type; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecipeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecipeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecipeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecipe_type {
		edges = append(edges, recipe.EdgeRecipeType)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecipeMutation) EdgeCleared(name string) bool {
	switch name {
	case recipe.EdgeRecipeType:
		return m.clearedrecipe_type
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecipeMutation) ClearEdge(name string) error {
	switch name {
	case recipe.EdgeRecipeType:
		m.ClearRecipeType()
		return nil
	}
	return fmt.Errorf("unknown Recipe unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecipeMutation) ResetEdge(name string) error {
	switch name {
	case recipe.EdgeRecipeType:
		m.ResetRecipeType()
		return nil
	}
	return fmt.Errorf("unknown Recipe edge %s", name)
}

// RecipeItemOutputsMutation represents an operation that mutates the RecipeItemOutputs nodes in the graph.
type RecipeItemOutputsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RecipeItemOutputs, error)
	predicates    []predicate.RecipeItemOutputs
}

var _ ent.Mutation = (*RecipeItemOutputsMutation)(nil)

// recipeitemoutputsOption allows management of the mutation configuration using functional options.
type recipeitemoutputsOption func(*RecipeItemOutputsMutation)

// newRecipeItemOutputsMutation creates new mutation for the RecipeItemOutputs entity.
func newRecipeItemOutputsMutation(c config, op Op, opts ...recipeitemoutputsOption) *RecipeItemOutputsMutation {
	m := &RecipeItemOutputsMutation{
		config:        c,
		op:            op,
		typ:           TypeRecipeItemOutputs,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecipeItemOutputsID sets the ID field of the mutation.
func withRecipeItemOutputsID(id int) recipeitemoutputsOption {
	return func(m *RecipeItemOutputsMutation) {
		var (
			err   error
			once  sync.Once
			value *RecipeItemOutputs
		)
		m.oldValue = func(ctx context.Context) (*RecipeItemOutputs, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RecipeItemOutputs.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecipeItemOutputs sets the old RecipeItemOutputs of the mutation.
func withRecipeItemOutputs(node *RecipeItemOutputs) recipeitemoutputsOption {
	return func(m *RecipeItemOutputsMutation) {
		m.oldValue = func(context.Context) (*RecipeItemOutputs, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecipeItemOutputsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecipeItemOutputsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecipeItemOutputsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RecipeItemOutputsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RecipeItemOutputs.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the RecipeItemOutputsMutation builder.
func (m *RecipeItemOutputsMutation) Where(ps ...predicate.RecipeItemOutputs) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RecipeItemOutputsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RecipeItemOutputsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RecipeItemOutputs, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RecipeItemOutputsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RecipeItemOutputsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RecipeItemOutputs).
func (m *RecipeItemOutputsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecipeItemOutputsMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecipeItemOutputsMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecipeItemOutputsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown RecipeItemOutputs field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeItemOutputsMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RecipeItemOutputs field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecipeItemOutputsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecipeItemOutputsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeItemOutputsMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown RecipeItemOutputs numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecipeItemOutputsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecipeItemOutputsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecipeItemOutputsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RecipeItemOutputs nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecipeItemOutputsMutation) ResetField(name string) error {
	return fmt.Errorf("unknown RecipeItemOutputs field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecipeItemOutputsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecipeItemOutputsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecipeItemOutputsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecipeItemOutputsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecipeItemOutputsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecipeItemOutputsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecipeItemOutputsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RecipeItemOutputs unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecipeItemOutputsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RecipeItemOutputs edge %s", name)
}

// RecipeTypeMutation represents an operation that mutates the RecipeType nodes in the graph.
type RecipeTypeMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	category           *string
	shapeless          *bool
	_type              *string
	clearedFields      map[string]struct{}
	recipe_type        map[string]struct{}
	removedrecipe_type map[string]struct{}
	clearedrecipe_type bool
	done               bool
	oldValue           func(context.Context) (*RecipeType, error)
	predicates         []predicate.RecipeType
}

var _ ent.Mutation = (*RecipeTypeMutation)(nil)

// recipetypeOption allows management of the mutation configuration using functional options.
type recipetypeOption func(*RecipeTypeMutation)

// newRecipeTypeMutation creates new mutation for the RecipeType entity.
func newRecipeTypeMutation(c config, op Op, opts ...recipetypeOption) *RecipeTypeMutation {
	m := &RecipeTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeRecipeType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecipeTypeID sets the ID field of the mutation.
func withRecipeTypeID(id string) recipetypeOption {
	return func(m *RecipeTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *RecipeType
		)
		m.oldValue = func(ctx context.Context) (*RecipeType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RecipeType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecipeType sets the old RecipeType of the mutation.
func withRecipeType(node *RecipeType) recipetypeOption {
	return func(m *RecipeTypeMutation) {
		m.oldValue = func(context.Context) (*RecipeType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecipeTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecipeTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RecipeType entities.
func (m *RecipeTypeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecipeTypeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RecipeTypeMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RecipeType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCategory sets the "category" field.
func (m *RecipeTypeMutation) SetCategory(s string) {
	m.category = &s
}

// Category returns the value of the "category" field in the mutation.
func (m *RecipeTypeMutation) Category() (r string, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the RecipeType entity.
// If the RecipeType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeTypeMutation) OldCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ResetCategory resets all changes to the "category" field.
func (m *RecipeTypeMutation) ResetCategory() {
	m.category = nil
}

// SetShapeless sets the "shapeless" field.
func (m *RecipeTypeMutation) SetShapeless(b bool) {
	m.shapeless = &b
}

// Shapeless returns the value of the "shapeless" field in the mutation.
func (m *RecipeTypeMutation) Shapeless() (r bool, exists bool) {
	v := m.shapeless
	if v == nil {
		return
	}
	return *v, true
}

// OldShapeless returns the old "shapeless" field's value of the RecipeType entity.
// If the RecipeType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeTypeMutation) OldShapeless(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShapeless is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShapeless requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShapeless: %w", err)
	}
	return oldValue.Shapeless, nil
}

// ResetShapeless resets all changes to the "shapeless" field.
func (m *RecipeTypeMutation) ResetShapeless() {
	m.shapeless = nil
}

// SetType sets the "type" field.
func (m *RecipeTypeMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *RecipeTypeMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the RecipeType entity.
// If the RecipeType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeTypeMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *RecipeTypeMutation) ResetType() {
	m._type = nil
}

// AddRecipeTypeIDs adds the "recipe_type" edge to the Recipe entity by ids.
func (m *RecipeTypeMutation) AddRecipeTypeIDs(ids ...string) {
	if m.recipe_type == nil {
		m.recipe_type = make(map[string]struct{})
	}
	for i := range ids {
		m.recipe_type[ids[i]] = struct{}{}
	}
}

// ClearRecipeType clears the "recipe_type" edge to the Recipe entity.
func (m *RecipeTypeMutation) ClearRecipeType() {
	m.clearedrecipe_type = true
}

// RecipeTypeCleared reports if the "recipe_type" edge to the Recipe entity was cleared.
func (m *RecipeTypeMutation) RecipeTypeCleared() bool {
	return m.clearedrecipe_type
}

// RemoveRecipeTypeIDs removes the "recipe_type" edge to the Recipe entity by IDs.
func (m *RecipeTypeMutation) RemoveRecipeTypeIDs(ids ...string) {
	if m.removedrecipe_type == nil {
		m.removedrecipe_type = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.recipe_type, ids[i])
		m.removedrecipe_type[ids[i]] = struct{}{}
	}
}

// RemovedRecipeType returns the removed IDs of the "recipe_type" edge to the Recipe entity.
func (m *RecipeTypeMutation) RemovedRecipeTypeIDs() (ids []string) {
	for id := range m.removedrecipe_type {
		ids = append(ids, id)
	}
	return
}

// RecipeTypeIDs returns the "recipe_type" edge IDs in the mutation.
func (m *RecipeTypeMutation) RecipeTypeIDs() (ids []string) {
	for id := range m.recipe_type {
		ids = append(ids, id)
	}
	return
}

// ResetRecipeType resets all changes to the "recipe_type" edge.
func (m *RecipeTypeMutation) ResetRecipeType() {
	m.recipe_type = nil
	m.clearedrecipe_type = false
	m.removedrecipe_type = nil
}

// Where appends a list predicates to the RecipeTypeMutation builder.
func (m *RecipeTypeMutation) Where(ps ...predicate.RecipeType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RecipeTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RecipeTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RecipeType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RecipeTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RecipeTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RecipeType).
func (m *RecipeTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecipeTypeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.category != nil {
		fields = append(fields, recipetype.FieldCategory)
	}
	if m.shapeless != nil {
		fields = append(fields, recipetype.FieldShapeless)
	}
	if m._type != nil {
		fields = append(fields, recipetype.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecipeTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case recipetype.FieldCategory:
		return m.Category()
	case recipetype.FieldShapeless:
		return m.Shapeless()
	case recipetype.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecipeTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case recipetype.FieldCategory:
		return m.OldCategory(ctx)
	case recipetype.FieldShapeless:
		return m.OldShapeless(ctx)
	case recipetype.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown RecipeType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case recipetype.FieldCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case recipetype.FieldShapeless:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShapeless(v)
		return nil
	case recipetype.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown RecipeType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecipeTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecipeTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RecipeType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecipeTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecipeTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecipeTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RecipeType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecipeTypeMutation) ResetField(name string) error {
	switch name {
	case recipetype.FieldCategory:
		m.ResetCategory()
		return nil
	case recipetype.FieldShapeless:
		m.ResetShapeless()
		return nil
	case recipetype.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown RecipeType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecipeTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recipe_type != nil {
		edges = append(edges, recipetype.EdgeRecipeType)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecipeTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case recipetype.EdgeRecipeType:
		ids := make([]ent.Value, 0, len(m.recipe_type))
		for id := range m.recipe_type {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecipeTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecipe_type != nil {
		edges = append(edges, recipetype.EdgeRecipeType)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecipeTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case recipetype.EdgeRecipeType:
		ids := make([]ent.Value, 0, len(m.removedrecipe_type))
		for id := range m.removedrecipe_type {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecipeTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecipe_type {
		edges = append(edges, recipetype.EdgeRecipeType)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecipeTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case recipetype.EdgeRecipeType:
		return m.clearedrecipe_type
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecipeTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RecipeType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecipeTypeMutation) ResetEdge(name string) error {
	switch name {
	case recipetype.EdgeRecipeType:
		m.ResetRecipeType()
		return nil
	}
	return fmt.Errorf("unknown RecipeType edge %s", name)
}
