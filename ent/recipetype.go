// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kevinkjt2000/factory-planner/ent/recipetype"
)

// RecipeType is the model entity for the RecipeType schema.
type RecipeType struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Shapeless holds the value of the "shapeless" field.
	Shapeless bool `json:"shapeless,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecipeTypeQuery when eager-loading is set.
	Edges        RecipeTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RecipeTypeEdges holds the relations/edges for other nodes in the graph.
type RecipeTypeEdges struct {
	// RecipeType holds the value of the recipe_type edge.
	RecipeType []*Recipe `json:"recipe_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecipeTypeOrErr returns the RecipeType value or an error if the edge
// was not loaded in eager-loading.
func (e RecipeTypeEdges) RecipeTypeOrErr() ([]*Recipe, error) {
	if e.loadedTypes[0] {
		return e.RecipeType, nil
	}
	return nil, &NotLoadedError{edge: "recipe_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecipeType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recipetype.FieldShapeless:
			values[i] = new(sql.NullBool)
		case recipetype.FieldID, recipetype.FieldCategory, recipetype.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecipeType fields.
func (rt *RecipeType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recipetype.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				rt.ID = value.String
			}
		case recipetype.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				rt.Category = value.String
			}
		case recipetype.FieldShapeless:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field shapeless", values[i])
			} else if value.Valid {
				rt.Shapeless = value.Bool
			}
		case recipetype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				rt.Type = value.String
			}
		default:
			rt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RecipeType.
// This includes values selected through modifiers, order, etc.
func (rt *RecipeType) Value(name string) (ent.Value, error) {
	return rt.selectValues.Get(name)
}

// QueryRecipeType queries the "recipe_type" edge of the RecipeType entity.
func (rt *RecipeType) QueryRecipeType() *RecipeQuery {
	return NewRecipeTypeClient(rt.config).QueryRecipeType(rt)
}

// Update returns a builder for updating this RecipeType.
// Note that you need to call RecipeType.Unwrap() before calling this method if this RecipeType
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *RecipeType) Update() *RecipeTypeUpdateOne {
	return NewRecipeTypeClient(rt.config).UpdateOne(rt)
}

// Unwrap unwraps the RecipeType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rt *RecipeType) Unwrap() *RecipeType {
	_tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecipeType is not a transactional entity")
	}
	rt.config.driver = _tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *RecipeType) String() string {
	var builder strings.Builder
	builder.WriteString("RecipeType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rt.ID))
	builder.WriteString("category=")
	builder.WriteString(rt.Category)
	builder.WriteString(", ")
	builder.WriteString("shapeless=")
	builder.WriteString(fmt.Sprintf("%v", rt.Shapeless))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(rt.Type)
	builder.WriteByte(')')
	return builder.String()
}

// RecipeTypes is a parsable slice of RecipeType.
type RecipeTypes []*RecipeType
