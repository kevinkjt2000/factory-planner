// Code generated by ent, DO NOT EDIT.

package recipe

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kevinkjt2000/factory-planner/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Recipe {
	return predicate.Recipe(sql.FieldContainsFold(FieldID, id))
}

// RecipeTypeID applies equality check predicate on the "recipe_type_id" field. It's identical to RecipeTypeIDEQ.
func RecipeTypeID(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldRecipeTypeID, v))
}

// RecipeTypeIDEQ applies the EQ predicate on the "recipe_type_id" field.
func RecipeTypeIDEQ(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldRecipeTypeID, v))
}

// RecipeTypeIDNEQ applies the NEQ predicate on the "recipe_type_id" field.
func RecipeTypeIDNEQ(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNEQ(FieldRecipeTypeID, v))
}

// RecipeTypeIDIn applies the In predicate on the "recipe_type_id" field.
func RecipeTypeIDIn(vs ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldIn(FieldRecipeTypeID, vs...))
}

// RecipeTypeIDNotIn applies the NotIn predicate on the "recipe_type_id" field.
func RecipeTypeIDNotIn(vs ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNotIn(FieldRecipeTypeID, vs...))
}

// RecipeTypeIDGT applies the GT predicate on the "recipe_type_id" field.
func RecipeTypeIDGT(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGT(FieldRecipeTypeID, v))
}

// RecipeTypeIDGTE applies the GTE predicate on the "recipe_type_id" field.
func RecipeTypeIDGTE(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGTE(FieldRecipeTypeID, v))
}

// RecipeTypeIDLT applies the LT predicate on the "recipe_type_id" field.
func RecipeTypeIDLT(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLT(FieldRecipeTypeID, v))
}

// RecipeTypeIDLTE applies the LTE predicate on the "recipe_type_id" field.
func RecipeTypeIDLTE(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLTE(FieldRecipeTypeID, v))
}

// RecipeTypeIDContains applies the Contains predicate on the "recipe_type_id" field.
func RecipeTypeIDContains(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldContains(FieldRecipeTypeID, v))
}

// RecipeTypeIDHasPrefix applies the HasPrefix predicate on the "recipe_type_id" field.
func RecipeTypeIDHasPrefix(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldHasPrefix(FieldRecipeTypeID, v))
}

// RecipeTypeIDHasSuffix applies the HasSuffix predicate on the "recipe_type_id" field.
func RecipeTypeIDHasSuffix(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldHasSuffix(FieldRecipeTypeID, v))
}

// RecipeTypeIDIsNil applies the IsNil predicate on the "recipe_type_id" field.
func RecipeTypeIDIsNil() predicate.Recipe {
	return predicate.Recipe(sql.FieldIsNull(FieldRecipeTypeID))
}

// RecipeTypeIDNotNil applies the NotNil predicate on the "recipe_type_id" field.
func RecipeTypeIDNotNil() predicate.Recipe {
	return predicate.Recipe(sql.FieldNotNull(FieldRecipeTypeID))
}

// RecipeTypeIDEqualFold applies the EqualFold predicate on the "recipe_type_id" field.
func RecipeTypeIDEqualFold(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEqualFold(FieldRecipeTypeID, v))
}

// RecipeTypeIDContainsFold applies the ContainsFold predicate on the "recipe_type_id" field.
func RecipeTypeIDContainsFold(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldContainsFold(FieldRecipeTypeID, v))
}

// HasRecipeType applies the HasEdge predicate on the "recipe_type" edge.
func HasRecipeType() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RecipeTypeTable, RecipeTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipeTypeWith applies the HasEdge predicate on the "recipe_type" edge with a given conditions (other predicates).
func HasRecipeTypeWith(preds ...predicate.RecipeType) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := newRecipeTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Recipe) predicate.Recipe {
	return predicate.Recipe(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Recipe) predicate.Recipe {
	return predicate.Recipe(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Recipe) predicate.Recipe {
	return predicate.Recipe(sql.NotPredicates(p))
}
