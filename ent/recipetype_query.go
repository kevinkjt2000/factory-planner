// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevinkjt2000/factory-planner/ent/predicate"
	"github.com/kevinkjt2000/factory-planner/ent/recipe"
	"github.com/kevinkjt2000/factory-planner/ent/recipetype"
)

// RecipeTypeQuery is the builder for querying RecipeType entities.
type RecipeTypeQuery struct {
	config
	ctx            *QueryContext
	order          []recipetype.OrderOption
	inters         []Interceptor
	predicates     []predicate.RecipeType
	withRecipeType *RecipeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RecipeTypeQuery builder.
func (rtq *RecipeTypeQuery) Where(ps ...predicate.RecipeType) *RecipeTypeQuery {
	rtq.predicates = append(rtq.predicates, ps...)
	return rtq
}

// Limit the number of records to be returned by this query.
func (rtq *RecipeTypeQuery) Limit(limit int) *RecipeTypeQuery {
	rtq.ctx.Limit = &limit
	return rtq
}

// Offset to start from.
func (rtq *RecipeTypeQuery) Offset(offset int) *RecipeTypeQuery {
	rtq.ctx.Offset = &offset
	return rtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rtq *RecipeTypeQuery) Unique(unique bool) *RecipeTypeQuery {
	rtq.ctx.Unique = &unique
	return rtq
}

// Order specifies how the records should be ordered.
func (rtq *RecipeTypeQuery) Order(o ...recipetype.OrderOption) *RecipeTypeQuery {
	rtq.order = append(rtq.order, o...)
	return rtq
}

// QueryRecipeType chains the current query on the "recipe_type" edge.
func (rtq *RecipeTypeQuery) QueryRecipeType() *RecipeQuery {
	query := (&RecipeClient{config: rtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipetype.Table, recipetype.FieldID, selector),
			sqlgraph.To(recipe.Table, recipe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recipetype.RecipeTypeTable, recipetype.RecipeTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RecipeType entity from the query.
// Returns a *NotFoundError when no RecipeType was found.
func (rtq *RecipeTypeQuery) First(ctx context.Context) (*RecipeType, error) {
	nodes, err := rtq.Limit(1).All(setContextOp(ctx, rtq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{recipetype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rtq *RecipeTypeQuery) FirstX(ctx context.Context) *RecipeType {
	node, err := rtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RecipeType ID from the query.
// Returns a *NotFoundError when no RecipeType ID was found.
func (rtq *RecipeTypeQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rtq.Limit(1).IDs(setContextOp(ctx, rtq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{recipetype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rtq *RecipeTypeQuery) FirstIDX(ctx context.Context) string {
	id, err := rtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RecipeType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RecipeType entity is found.
// Returns a *NotFoundError when no RecipeType entities are found.
func (rtq *RecipeTypeQuery) Only(ctx context.Context) (*RecipeType, error) {
	nodes, err := rtq.Limit(2).All(setContextOp(ctx, rtq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{recipetype.Label}
	default:
		return nil, &NotSingularError{recipetype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rtq *RecipeTypeQuery) OnlyX(ctx context.Context) *RecipeType {
	node, err := rtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RecipeType ID in the query.
// Returns a *NotSingularError when more than one RecipeType ID is found.
// Returns a *NotFoundError when no entities are found.
func (rtq *RecipeTypeQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rtq.Limit(2).IDs(setContextOp(ctx, rtq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{recipetype.Label}
	default:
		err = &NotSingularError{recipetype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rtq *RecipeTypeQuery) OnlyIDX(ctx context.Context) string {
	id, err := rtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RecipeTypes.
func (rtq *RecipeTypeQuery) All(ctx context.Context) ([]*RecipeType, error) {
	ctx = setContextOp(ctx, rtq.ctx, ent.OpQueryAll)
	if err := rtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RecipeType, *RecipeTypeQuery]()
	return withInterceptors[[]*RecipeType](ctx, rtq, qr, rtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rtq *RecipeTypeQuery) AllX(ctx context.Context) []*RecipeType {
	nodes, err := rtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RecipeType IDs.
func (rtq *RecipeTypeQuery) IDs(ctx context.Context) (ids []string, err error) {
	if rtq.ctx.Unique == nil && rtq.path != nil {
		rtq.Unique(true)
	}
	ctx = setContextOp(ctx, rtq.ctx, ent.OpQueryIDs)
	if err = rtq.Select(recipetype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rtq *RecipeTypeQuery) IDsX(ctx context.Context) []string {
	ids, err := rtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rtq *RecipeTypeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rtq.ctx, ent.OpQueryCount)
	if err := rtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rtq, querierCount[*RecipeTypeQuery](), rtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rtq *RecipeTypeQuery) CountX(ctx context.Context) int {
	count, err := rtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rtq *RecipeTypeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rtq.ctx, ent.OpQueryExist)
	switch _, err := rtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rtq *RecipeTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := rtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RecipeTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rtq *RecipeTypeQuery) Clone() *RecipeTypeQuery {
	if rtq == nil {
		return nil
	}
	return &RecipeTypeQuery{
		config:         rtq.config,
		ctx:            rtq.ctx.Clone(),
		order:          append([]recipetype.OrderOption{}, rtq.order...),
		inters:         append([]Interceptor{}, rtq.inters...),
		predicates:     append([]predicate.RecipeType{}, rtq.predicates...),
		withRecipeType: rtq.withRecipeType.Clone(),
		// clone intermediate query.
		sql:  rtq.sql.Clone(),
		path: rtq.path,
	}
}

// WithRecipeType tells the query-builder to eager-load the nodes that are connected to
// the "recipe_type" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RecipeTypeQuery) WithRecipeType(opts ...func(*RecipeQuery)) *RecipeTypeQuery {
	query := (&RecipeClient{config: rtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rtq.withRecipeType = query
	return rtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Category string `json:"category,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RecipeType.Query().
//		GroupBy(recipetype.FieldCategory).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rtq *RecipeTypeQuery) GroupBy(field string, fields ...string) *RecipeTypeGroupBy {
	rtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RecipeTypeGroupBy{build: rtq}
	grbuild.flds = &rtq.ctx.Fields
	grbuild.label = recipetype.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Category string `json:"category,omitempty"`
//	}
//
//	client.RecipeType.Query().
//		Select(recipetype.FieldCategory).
//		Scan(ctx, &v)
func (rtq *RecipeTypeQuery) Select(fields ...string) *RecipeTypeSelect {
	rtq.ctx.Fields = append(rtq.ctx.Fields, fields...)
	sbuild := &RecipeTypeSelect{RecipeTypeQuery: rtq}
	sbuild.label = recipetype.Label
	sbuild.flds, sbuild.scan = &rtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RecipeTypeSelect configured with the given aggregations.
func (rtq *RecipeTypeQuery) Aggregate(fns ...AggregateFunc) *RecipeTypeSelect {
	return rtq.Select().Aggregate(fns...)
}

func (rtq *RecipeTypeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rtq); err != nil {
				return err
			}
		}
	}
	for _, f := range rtq.ctx.Fields {
		if !recipetype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rtq.path != nil {
		prev, err := rtq.path(ctx)
		if err != nil {
			return err
		}
		rtq.sql = prev
	}
	return nil
}

func (rtq *RecipeTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RecipeType, error) {
	var (
		nodes       = []*RecipeType{}
		_spec       = rtq.querySpec()
		loadedTypes = [1]bool{
			rtq.withRecipeType != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RecipeType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RecipeType{config: rtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rtq.withRecipeType; query != nil {
		if err := rtq.loadRecipeType(ctx, query, nodes,
			func(n *RecipeType) { n.Edges.RecipeType = []*Recipe{} },
			func(n *RecipeType, e *Recipe) { n.Edges.RecipeType = append(n.Edges.RecipeType, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rtq *RecipeTypeQuery) loadRecipeType(ctx context.Context, query *RecipeQuery, nodes []*RecipeType, init func(*RecipeType), assign func(*RecipeType, *Recipe)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*RecipeType)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(recipe.FieldRecipeTypeID)
	}
	query.Where(predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(recipetype.RecipeTypeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RecipeTypeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "recipe_type_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rtq *RecipeTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rtq.querySpec()
	_spec.Node.Columns = rtq.ctx.Fields
	if len(rtq.ctx.Fields) > 0 {
		_spec.Unique = rtq.ctx.Unique != nil && *rtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rtq.driver, _spec)
}

func (rtq *RecipeTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(recipetype.Table, recipetype.Columns, sqlgraph.NewFieldSpec(recipetype.FieldID, field.TypeString))
	_spec.From = rtq.sql
	if unique := rtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rtq.path != nil {
		_spec.Unique = true
	}
	if fields := rtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recipetype.FieldID)
		for i := range fields {
			if fields[i] != recipetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rtq *RecipeTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rtq.driver.Dialect())
	t1 := builder.Table(recipetype.Table)
	columns := rtq.ctx.Fields
	if len(columns) == 0 {
		columns = recipetype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rtq.sql != nil {
		selector = rtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rtq.ctx.Unique != nil && *rtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rtq.predicates {
		p(selector)
	}
	for _, p := range rtq.order {
		p(selector)
	}
	if offset := rtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RecipeTypeGroupBy is the group-by builder for RecipeType entities.
type RecipeTypeGroupBy struct {
	selector
	build *RecipeTypeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rtgb *RecipeTypeGroupBy) Aggregate(fns ...AggregateFunc) *RecipeTypeGroupBy {
	rtgb.fns = append(rtgb.fns, fns...)
	return rtgb
}

// Scan applies the selector query and scans the result into the given value.
func (rtgb *RecipeTypeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rtgb.build.ctx, ent.OpQueryGroupBy)
	if err := rtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecipeTypeQuery, *RecipeTypeGroupBy](ctx, rtgb.build, rtgb, rtgb.build.inters, v)
}

func (rtgb *RecipeTypeGroupBy) sqlScan(ctx context.Context, root *RecipeTypeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rtgb.fns))
	for _, fn := range rtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rtgb.flds)+len(rtgb.fns))
		for _, f := range *rtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RecipeTypeSelect is the builder for selecting fields of RecipeType entities.
type RecipeTypeSelect struct {
	*RecipeTypeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rts *RecipeTypeSelect) Aggregate(fns ...AggregateFunc) *RecipeTypeSelect {
	rts.fns = append(rts.fns, fns...)
	return rts
}

// Scan applies the selector query and scans the result into the given value.
func (rts *RecipeTypeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rts.ctx, ent.OpQuerySelect)
	if err := rts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecipeTypeQuery, *RecipeTypeSelect](ctx, rts.RecipeTypeQuery, rts, rts.inters, v)
}

func (rts *RecipeTypeSelect) sqlScan(ctx context.Context, root *RecipeTypeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rts.fns))
	for _, fn := range rts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
